<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * verify-u API
 *
 * # Introduction This API is documented in **OpenAPI 3.0 format**.  This API allowst the following operations: * retrieve a list of the last 10 identifications * retrieve profile data of a client's identification * download media captured during identification * upload documents for signing * download signed documents * receive webhooks notifications regarding identification state changes  # Basics * API calls have to be secured with HTTPS. * All data has to be submitted UTF-8 encoded. * The reply is sent JSON encoded.  # Authentication **verify-u** API uses Basic Authentication with secret key as username only.  Detailed information is provided at [Authentication](authentication)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse200 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'created_at' => '\DateTime',
        'date_of_birth' => 'string',
        'first_name' => 'string',
        'gender' => 'string',
        'id' => 'string',
        'id_document' => '\OpenAPI\Client\Model\IdentificationsIdDocument',
        'id_document_back' => '\OpenAPI\Client\Model\IdentificationsIdDocumentBack',
        'id_document_secondary' => '\OpenAPI\Client\Model\IdentificationsIdDocumentSecondary',
        'last_name' => 'string',
        'primary_id_document_number' => 'string',
        'rejected' => 'bool',
        'rejection_cause' => 'string',
        'state' => 'string',
        'status' => 'string',
        'audit_documents' => '\OpenAPI\Client\Model\IdentificationsAuditDocuments[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'address' => null,
        'created_at' => 'date-time',
        'date_of_birth' => null,
        'first_name' => null,
        'gender' => null,
        'id' => 'uuid',
        'id_document' => null,
        'id_document_back' => null,
        'id_document_secondary' => null,
        'last_name' => null,
        'primary_id_document_number' => null,
        'rejected' => null,
        'rejection_cause' => null,
        'state' => null,
        'status' => null,
        'audit_documents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'created_at' => 'created_at',
        'date_of_birth' => 'date_of_birth',
        'first_name' => 'first_name',
        'gender' => 'gender',
        'id' => 'id',
        'id_document' => 'id_document',
        'id_document_back' => 'id_document_back',
        'id_document_secondary' => 'id_document_secondary',
        'last_name' => 'last_name',
        'primary_id_document_number' => 'primary_id_document_number',
        'rejected' => 'rejected',
        'rejection_cause' => 'rejection_cause',
        'state' => 'state',
        'status' => 'status',
        'audit_documents' => 'audit_documents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'created_at' => 'setCreatedAt',
        'date_of_birth' => 'setDateOfBirth',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'id' => 'setId',
        'id_document' => 'setIdDocument',
        'id_document_back' => 'setIdDocumentBack',
        'id_document_secondary' => 'setIdDocumentSecondary',
        'last_name' => 'setLastName',
        'primary_id_document_number' => 'setPrimaryIdDocumentNumber',
        'rejected' => 'setRejected',
        'rejection_cause' => 'setRejectionCause',
        'state' => 'setState',
        'status' => 'setStatus',
        'audit_documents' => 'setAuditDocuments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'created_at' => 'getCreatedAt',
        'date_of_birth' => 'getDateOfBirth',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'id' => 'getId',
        'id_document' => 'getIdDocument',
        'id_document_back' => 'getIdDocumentBack',
        'id_document_secondary' => 'getIdDocumentSecondary',
        'last_name' => 'getLastName',
        'primary_id_document_number' => 'getPrimaryIdDocumentNumber',
        'rejected' => 'getRejected',
        'rejection_cause' => 'getRejectionCause',
        'state' => 'getState',
        'status' => 'getStatus',
        'audit_documents' => 'getAuditDocuments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['id_document'] = isset($data['id_document']) ? $data['id_document'] : null;
        $this->container['id_document_back'] = isset($data['id_document_back']) ? $data['id_document_back'] : null;
        $this->container['id_document_secondary'] = isset($data['id_document_secondary']) ? $data['id_document_secondary'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['primary_id_document_number'] = isset($data['primary_id_document_number']) ? $data['primary_id_document_number'] : null;
        $this->container['rejected'] = isset($data['rejected']) ? $data['rejected'] : null;
        $this->container['rejection_cause'] = isset($data['rejection_cause']) ? $data['rejection_cause'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['audit_documents'] = isset($data['audit_documents']) ? $data['audit_documents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address The client's address in format provided by ID document
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Time at which the object was created in notation as defined by RFC 3339, section 5.6
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string|null $date_of_birth The client's date of birth as represented in MRZ of ID document
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The client's first name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The client's gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identification Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id_document
     *
     * @return \OpenAPI\Client\Model\IdentificationsIdDocument|null
     */
    public function getIdDocument()
    {
        return $this->container['id_document'];
    }

    /**
     * Sets id_document
     *
     * @param \OpenAPI\Client\Model\IdentificationsIdDocument|null $id_document id_document
     *
     * @return $this
     */
    public function setIdDocument($id_document)
    {
        $this->container['id_document'] = $id_document;

        return $this;
    }

    /**
     * Gets id_document_back
     *
     * @return \OpenAPI\Client\Model\IdentificationsIdDocumentBack|null
     */
    public function getIdDocumentBack()
    {
        return $this->container['id_document_back'];
    }

    /**
     * Sets id_document_back
     *
     * @param \OpenAPI\Client\Model\IdentificationsIdDocumentBack|null $id_document_back id_document_back
     *
     * @return $this
     */
    public function setIdDocumentBack($id_document_back)
    {
        $this->container['id_document_back'] = $id_document_back;

        return $this;
    }

    /**
     * Gets id_document_secondary
     *
     * @return \OpenAPI\Client\Model\IdentificationsIdDocumentSecondary|null
     */
    public function getIdDocumentSecondary()
    {
        return $this->container['id_document_secondary'];
    }

    /**
     * Sets id_document_secondary
     *
     * @param \OpenAPI\Client\Model\IdentificationsIdDocumentSecondary|null $id_document_secondary id_document_secondary
     *
     * @return $this
     */
    public function setIdDocumentSecondary($id_document_secondary)
    {
        $this->container['id_document_secondary'] = $id_document_secondary;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The client's last name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets primary_id_document_number
     *
     * @return string|null
     */
    public function getPrimaryIdDocumentNumber()
    {
        return $this->container['primary_id_document_number'];
    }

    /**
     * Sets primary_id_document_number
     *
     * @param string|null $primary_id_document_number Number of the primary ID document
     *
     * @return $this
     */
    public function setPrimaryIdDocumentNumber($primary_id_document_number)
    {
        $this->container['primary_id_document_number'] = $primary_id_document_number;

        return $this;
    }

    /**
     * Gets rejected
     *
     * @return bool|null
     */
    public function getRejected()
    {
        return $this->container['rejected'];
    }

    /**
     * Sets rejected
     *
     * @param bool|null $rejected Indicates whether identification has been rejected
     *
     * @return $this
     */
    public function setRejected($rejected)
    {
        $this->container['rejected'] = $rejected;

        return $this;
    }

    /**
     * Gets rejection_cause
     *
     * @return string|null
     */
    public function getRejectionCause()
    {
        return $this->container['rejection_cause'];
    }

    /**
     * Sets rejection_cause
     *
     * @param string|null $rejection_cause Identification rejection cause
     *
     * @return $this
     */
    public function setRejectionCause($rejection_cause)
    {
        $this->container['rejection_cause'] = $rejection_cause;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state OAuth parameter in format `[CLIENT_REFERENCE_ID]:[SESSION_ID]` supplied to identification gateway
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Identification status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets audit_documents
     *
     * @return \OpenAPI\Client\Model\IdentificationsAuditDocuments[]|null
     */
    public function getAuditDocuments()
    {
        return $this->container['audit_documents'];
    }

    /**
     * Sets audit_documents
     *
     * @param \OpenAPI\Client\Model\IdentificationsAuditDocuments[]|null $audit_documents Audit documents
     *
     * @return $this
     */
    public function setAuditDocuments($audit_documents)
    {
        $this->container['audit_documents'] = $audit_documents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


