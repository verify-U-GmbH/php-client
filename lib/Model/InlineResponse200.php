<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * verify-u API
 *
 * # Introduction This API is documented in **OpenAPI 3.0 format**.  This API * enables a user to retrieve a list of the last 10 identifications * enables a user to retrieve profile data of a client's identification  # Basics * API calls have to be secured with HTTPS. * All data has to be submitted UTF-8 encoded. * The reply is sent JSON encoded.  # Authentication **verify-u** API uses Basic Authentication with secret key as username only.  Detailed information is provided at [Authentication](authentication)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse200 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'age_permission' => 'bool',
        'channel_name' => 'string',
        'created_at' => 'string',
        'full_name_permission' => 'bool',
        'gender_permission' => 'bool',
        'id' => 'string',
        'passport_permission' => 'bool',
        'state' => 'string',
        'step' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'age_permission' => null,
        'channel_name' => null,
        'created_at' => 'timestamp',
        'full_name_permission' => null,
        'gender_permission' => null,
        'id' => 'uuid',
        'passport_permission' => null,
        'state' => null,
        'step' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'age_permission' => 'age_permission',
        'channel_name' => 'channel_name',
        'created_at' => 'created_at',
        'full_name_permission' => 'full_name_permission',
        'gender_permission' => 'gender_permission',
        'id' => 'id',
        'passport_permission' => 'passport_permission',
        'state' => 'state',
        'step' => 'step'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'age_permission' => 'setAgePermission',
        'channel_name' => 'setChannelName',
        'created_at' => 'setCreatedAt',
        'full_name_permission' => 'setFullNamePermission',
        'gender_permission' => 'setGenderPermission',
        'id' => 'setId',
        'passport_permission' => 'setPassportPermission',
        'state' => 'setState',
        'step' => 'setStep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'age_permission' => 'getAgePermission',
        'channel_name' => 'getChannelName',
        'created_at' => 'getCreatedAt',
        'full_name_permission' => 'getFullNamePermission',
        'gender_permission' => 'getGenderPermission',
        'id' => 'getId',
        'passport_permission' => 'getPassportPermission',
        'state' => 'getState',
        'step' => 'getStep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['age_permission'] = isset($data['age_permission']) ? $data['age_permission'] : null;
        $this->container['channel_name'] = isset($data['channel_name']) ? $data['channel_name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['full_name_permission'] = isset($data['full_name_permission']) ? $data['full_name_permission'] : null;
        $this->container['gender_permission'] = isset($data['gender_permission']) ? $data['gender_permission'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['passport_permission'] = isset($data['passport_permission']) ? $data['passport_permission'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['step'] = isset($data['step']) ? $data['step'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets age_permission
     *
     * @return bool|null
     */
    public function getAgePermission()
    {
        return $this->container['age_permission'];
    }

    /**
     * Sets age_permission
     *
     * @param bool|null $age_permission Wether the permission to access his age was granted by the client
     *
     * @return $this
     */
    public function setAgePermission($age_permission)
    {
        $this->container['age_permission'] = $age_permission;

        return $this;
    }

    /**
     * Gets channel_name
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     *
     * @param string|null $channel_name Name of the ID channel which was used for identification
     *
     * @return $this
     */
    public function setChannelName($channel_name)
    {
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the object was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets full_name_permission
     *
     * @return bool|null
     */
    public function getFullNamePermission()
    {
        return $this->container['full_name_permission'];
    }

    /**
     * Sets full_name_permission
     *
     * @param bool|null $full_name_permission Wether the permission to access his full name was granted by the client
     *
     * @return $this
     */
    public function setFullNamePermission($full_name_permission)
    {
        $this->container['full_name_permission'] = $full_name_permission;

        return $this;
    }

    /**
     * Gets gender_permission
     *
     * @return bool|null
     */
    public function getGenderPermission()
    {
        return $this->container['gender_permission'];
    }

    /**
     * Sets gender_permission
     *
     * @param bool|null $gender_permission Wether the permission to access his gender was granted by the client
     *
     * @return $this
     */
    public function setGenderPermission($gender_permission)
    {
        $this->container['gender_permission'] = $gender_permission;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique ID of the client's identification
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets passport_permission
     *
     * @return bool|null
     */
    public function getPassportPermission()
    {
        return $this->container['passport_permission'];
    }

    /**
     * Sets passport_permission
     *
     * @param bool|null $passport_permission Wether the permission to access his ID document data was granted by the client
     *
     * @return $this
     */
    public function setPassportPermission($passport_permission)
    {
        $this->container['passport_permission'] = $passport_permission;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state parameter provided for the client's identification
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets step
     *
     * @return int|null
     */
    public function getStep()
    {
        return $this->container['step'];
    }

    /**
     * Sets step
     *
     * @param int|null $step The process step of the client's identification
     *
     * @return $this
     */
    public function setStep($step)
    {
        $this->container['step'] = $step;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


